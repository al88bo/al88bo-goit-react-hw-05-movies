{"version":3,"file":"static/js/278.a8276b1a.chunk.js","mappings":"+MAkDA,UA7Ce,WACb,IAAAA,GAA4BC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAnCI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GACxBI,GAA8BL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAtCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GACpBG,GAAWC,EAAAA,EAAAA,MACjBC,GAAwCC,EAAAA,EAAAA,MAAiBC,GAAAX,EAAAA,EAAAA,GAAAS,EAAA,GAAlDG,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAC9BG,EAAQF,EAAaG,IAAI,UAE/BC,EAAAA,EAAAA,YAAU,WACHF,IACLR,GAAW,IACXW,EAAAA,EAAAA,IAAgBH,GACbI,MAAK,SAAAC,GAAA,IAAGC,EAAOD,EAAPC,QAAO,OAAOlB,EAAUkB,EAAQ,IACxCC,OAAM,SAAAC,GAAK,OAAIC,MAAMD,EAAME,QAAQ,IACnCC,SAAQ,kBAAMnB,GAAW,EAAM,IACpC,GAAG,CAACQ,IASJ,OACEY,EAAAA,EAAAA,MAAA,WAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,QAAME,OAAO,GAAGC,SATC,SAAAC,GACnBA,EAAEC,iBACFlB,EAAgB,CACdC,MAAOgB,EAAEE,cAAcC,SAASC,YAAYC,OAEhD,EAI2CR,SAAA,EACrCS,EAAAA,EAAAA,KAAA,SAAOC,KAAK,OAAOC,KAAK,cAAcC,aAAczB,EAAO0B,UAAQ,KACnEJ,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAAQV,SAAC,cAEvBtB,IAAW+B,EAAAA,EAAAA,KAACK,EAAAA,EAAM,KACjBpC,GAAWJ,IACXmC,EAAAA,EAAAA,KAAA,MAAAT,SACS,OAAN1B,QAAM,IAANA,OAAM,EAANA,EAAQyC,KAAI,SAAAC,GAAA,IAAGC,EAAED,EAAFC,GAAIC,EAAKF,EAALE,MAAK,OACvBT,EAAAA,EAAAA,KAAA,MAAAT,UACES,EAAAA,EAAAA,KAACU,EAAAA,GAAI,CAACC,GAAE,GAAAC,OAAKJ,GAAMK,MAAO,CAAEC,KAAM3C,GAAWoB,SAC1CkB,KAFID,EAIJ,QAMjB,C","sources":["pages/Movies/Movies.jsx"],"sourcesContent":["import { Loader } from 'components/Loader/Loader';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams, Link, useLocation } from 'react-router-dom';\nimport { getMovieByQuery } from 'servises/api';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const location = useLocation();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (!query) return;\n    setLoading(true);\n    getMovieByQuery(query)\n      .then(({ results }) => setMovies(results))\n      .catch(error => alert(error.message))\n      .finally(() => setLoading(false));\n  }, [query]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setSearchParams({\n      query: e.currentTarget.elements.searchInput.value,\n    });\n  };\n\n  return (\n    <section>\n      <form action=\"\" onSubmit={handleSubmit}>\n        <input type=\"text\" name=\"searchInput\" defaultValue={query} required />\n        <button type=\"submit\">Search</button>\n      </form>\n      {loading && <Loader />}\n      {!loading && movies && (\n        <ul>\n          {movies?.map(({ id, title }) => (\n            <li key={id}>\n              <Link to={`${id}`} state={{ from: location }}>\n                {title}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </section>\n  );\n};\n\nexport default Movies;\n"],"names":["_useState","useState","_useState2","_slicedToArray","movies","setMovies","_useState3","_useState4","loading","setLoading","location","useLocation","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","query","get","useEffect","getMovieByQuery","then","_ref","results","catch","error","alert","message","finally","_jsxs","children","action","onSubmit","e","preventDefault","currentTarget","elements","searchInput","value","_jsx","type","name","defaultValue","required","Loader","map","_ref2","id","title","Link","to","concat","state","from"],"sourceRoot":""}